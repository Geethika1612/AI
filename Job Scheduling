import random
import numpy as np


NUM_JOBS = 10
NUM_MACHINES = 3
POPULATION_SIZE = 20
MAX_GENERATIONS = 100
MUTATION_RATE = 0.1

def generate_chromosome():
    return np.random.randint(0, NUM_MACHINES, NUM_JOBS)

def fitness(chromosome):
    machine_times = [0] * NUM_MACHINES
    for job, machine in enumerate(chromosome):
        machine_times[machine] += job + 1  
    return max(machine_times)

def two_point_crossover(parent1, parent2):
    point1, point2 = sorted(random.sample(range(NUM_JOBS), 2))
    child1 = np.concatenate((parent1[:point1], parent2[point1:point2], parent1[point2:]))
    child2 = np.concatenate((parent2[:point1], parent1[point1:point2], parent2[point2:]))
    return child1, child2

def mutate(chromosome):
    if random.random() < MUTATION_RATE:
        mutation_point = random.randint(0, NUM_JOBS - 1)
        chromosome[mutation_point] = random.randint(0, NUM_MACHINES - 1)

def roulette_wheel_selection(population, fitness_scores):
    total_fitness = sum(fitness_scores)
    probabilities = [score / total_fitness for score in fitness_scores]
    return population[np.random.choice(len(population), p=probabilities)]


population = [generate_chromosome() for _ in range(POPULATION_SIZE)]

for generation in range(MAX_GENERATIONS):
    fitness_scores = [1 / fitness(chromo) for chromo in population]  
    new_population = []

    while len(new_population) < POPULATION_SIZE:
        parent1 = roulette_wheel_selection(population, fitness_scores)
        parent2 = roulette_wheel_selection(population, fitness_scores)
        child1, child2 = two_point_crossover(parent1, parent2)
        mutate(child1)
        mutate(child2)
        new_population.extend([child1, child2])

    population = new_population[:POPULATION_SIZE]

   
    best_fit = min(fitness(pop) for pop in population)
    print(f"Generation {generation + 1}: Best Completion Time = {best_fit}")
    if best_fit == min(NUM_JOBS, NUM_JOBS // NUM_MACHINES): 
        break

print("Optimal Schedule Found:")
optimal_solution = min(population, key=fitness)
print(optimal_solution)
