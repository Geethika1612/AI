import math

game_tree = {
    'A': ['B1', 'B2'],
    'B1': ['C1', 'C2'],
    'B2': ['C3', 'C4'],
    'C1': ['D1', 'D2'],
    'C2': ['D3', 'D4'],
    'C3': ['D5', 'D6'],
    'C4': ['D7', 'D8'],
    'D1': ['E1', 'E2'],
    'D2': ['E3', 'E4'],
    'D3': ['E5', 'E6'],
    'D4': ['E7', 'E8'],
    'D5': ['E9', 'E10'],
    'D6': ['E11', 'E12'],
    'D7': ['E13', 'E14'],
    'D8': ['E15', 'E16'],
    'E1': 5, 'E2': -1, 'E3': 4, 'E4': 3,
    'E5': -2, 'E6': -5, 'E7': 9, 'E8': 8,
    'E9': 6, 'E10': 1, 'E11': -4, 'E12': 2,
    'E13': 4, 'E14': 7, 'E15': 3, 'E16': -3
}

def minimax(node, maximize):
    if isinstance(game_tree[node], int):
        return game_tree[node]
    results = [minimax(child, not maximize) for child in game_tree[node]]
    return max(results) if maximize else min(results)

def optimal_path(node, maximize):
    path = [node]
    while node in game_tree and not isinstance(game_tree[node], int):
        node = max(game_tree[node], key=lambda x: minimax(x, not maximize)) if maximize else min(game_tree[node], key=lambda x: minimax(x, not maximize))
        path.append(node)
        maximize = not maximize
    return path

best_value = minimax('A', True)
best_path = optimal_path('A', True)

print("Optimal Value:", best_value)
print("Optimal Path:", " -> ".join(best_path))
